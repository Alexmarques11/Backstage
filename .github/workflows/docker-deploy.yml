name: Docker Hub Deploy

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/docker-deploy.yml'
  release:
    types: [ published ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/backstage-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image pushed successfully
      run: |
        echo "‚úÖ Docker image pushed successfully!"
        echo "üê≥ Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/backstage-backend"
        echo "üì¶ Pull command: docker pull ${{ secrets.DOCKER_USERNAME }}/backstage-backend:latest"

  test-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Test Docker image from Docker Hub
      run: |
        echo "Testing image: ${{ secrets.DOCKER_USERNAME }}/backstage-backend:latest"
        
        # Pull and run the image from Docker Hub
        docker run -d -p 3000:3000 \
          -e DATABASE_HOST=localhost \
          -e DATABASE_USER=testuser \
          -e DATABASE_PASSWORD=testpass \
          -e DATABASE_NAME=testdb \
          -e ACCESS_TOKEN_SECRET=test_secret \
          --name backstage-test \
          ${{ secrets.DOCKER_USERNAME }}/backstage-backend:latest
        
        # Wait for container to start
        sleep 10
        
        # Test if container is running
        docker ps | grep backstage-test || exit 1
        
        # Cleanup
        docker stop backstage-test
        docker rm backstage-test

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, test-docker-image]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Ready for production deployment"
        echo "Set these secrets in GitHub:"
        echo "- PRODUCTION_SERVER_HOST"
        echo "- PRODUCTION_SERVER_USER" 
        echo "- PRODUCTION_SERVER_KEY"
        echo "- DATABASE_USER (override default)"
        echo "- DATABASE_PASSWORD (override default)"
        echo "- DATABASE_HOST (production database)"
        
        # Uncomment when secrets are configured:
        # - name: Deploy via SSH
        #   uses: appleboy/ssh-action@v1.0.0
        #   with:
        #     host: ${{ secrets.PRODUCTION_SERVER_HOST }}
        #     username: ${{ secrets.PRODUCTION_SERVER_USER }}
        #     key: ${{ secrets.PRODUCTION_SERVER_KEY }}
        #     script: |
        #       cd /path/to/your/app
        #       docker compose pull
        #       docker compose up -d