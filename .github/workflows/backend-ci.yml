name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user123
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: backstage
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: backend
      run: npm ci
    
    - name: Install PostgreSQL client
      run: sudo apt-get update && sudo apt-get install -y postgresql-client
    
    - name: Test database connectivity
      run: |
        # Test if PostgreSQL is ready
        PGPASSWORD=123456 pg_isready -h localhost -p 5432 -U user123 -d backstage || {
          echo "PostgreSQL is not ready"
          exit 1
        }
        echo "PostgreSQL is ready"
    
    - name: Start backend server
      working-directory: backend
      run: |
        npm run dev &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # Wait for server to start
        for i in {1..30}; do
          if curl -s http://localhost:3000/ > /dev/null 2>&1; then
            echo "Server is ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 2
        done
      env:
        NODE_ENV: test
        # Override database config for GitHub Actions
        DATABASE_HOST: localhost
        DATABASE_USER: user123
        DATABASE_PASSWORD: 123456
        DATABASE_NAME: backstage
    
    - name: Setup database
      run: |
        echo "Setting up database tables..."
        curl -f http://localhost:3000/setup || {
          echo "Database setup failed"
          exit 1
        }
    
    - name: Test API endpoints
      run: |
        echo "Testing GET endpoint..."
        curl -f http://localhost:3000/ || exit 1
        
        echo "Testing POST endpoint..."
        curl -f -X POST http://localhost:3000/ \
          -H "Content-Type: application/json" \
          -d '{"name": "Test", "lastname": "User", "age": 22, "username": "Username", "email": "teste@gmail.com", "password": "Password","musical_genre": ["rock", "pop"]}' || exit 1
        
        echo "Verifying user was created..."
        response=$(curl -s http://localhost:3000/)
        echo "Response: $response"
        echo "$response" | grep -q "Test" || exit 1

    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          echo "Stopping server process $SERVER_PID"
          kill $SERVER_PID || true
        fi

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      working-directory: backend
      run: |
        docker build -t backstage-backend:latest .
        
    - name: Test Docker image
      working-directory: backend
      run: |
        echo "Starting Docker Compose services..."
        docker compose up -d
        sleep 15
        
        echo "Testing Docker setup endpoint..."
        curl -f http://localhost:13000/setup || exit 1
        
        echo "Testing Docker GET endpoint..."
        curl -f http://localhost:13000/ || exit 1
        
        echo "Testing Docker POST endpoint..."
        curl -f -X POST http://localhost:13000/ \
          -H "Content-Type: application/json" \
          -d '{"name": "Docker", "lastname": "Test"}' || exit 1
        
        echo "Verifying Docker user was created..."
        response=$(curl -s http://localhost:13000/)
        echo "Docker Response: $response"
        echo "$response" | grep -q "Docker" || exit 1
        
        echo "Stopping Docker services..."
        docker compose down
